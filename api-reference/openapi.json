{
  "openapi": "3.0.0",
  "paths": {
    "/v1/loan-management/health": {
      "get": {
        "operationId": "LoanManagementController_getHealth_v1",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["LoanManagement"]
      }
    },
    "/v1/loan-management/loans/schedule-previews": {
      "post": {
        "operationId": "LoanController_postLoanSchedulePreviews_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoanSchedulePreviewRequestDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "loan schedule preview response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoanSchedulePreviewResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/schedule-preview": {
      "post": {
        "operationId": "LoanController_postLoanSchedulePreview_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoanSchedulePreviewRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "loan schedule preview response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanSchedulePreviewResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/interest-report": {
      "get": {
        "operationId": "LoanController_exportInterestIncomeReport_v1",
        "parameters": [
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Date from",
            "schema": {
              "format": "date-time",
              "example": "2024-05-10",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "Date to and including",
            "schema": {
              "format": "date-time",
              "example": "2024-05-10",
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": false,
            "in": "query",
            "description": "The id of the entity associated with the loan",
            "schema": {
              "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Returns a CSV file with comm summary" },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/cof-report": {
      "get": {
        "operationId": "LoanController_exportCofReport_v1",
        "parameters": [
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Date from",
            "schema": {
              "format": "date-time",
              "example": "2024-05-10",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "Date to and including",
            "schema": {
              "format": "date-time",
              "example": "2024-05-10",
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": false,
            "in": "query",
            "description": "The id of the entity associated with the loan",
            "schema": {
              "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee",
              "type": "string"
            }
          },
          {
            "name": "fundsToAllocate",
            "required": true,
            "in": "query",
            "description": "The Funds to be Divied up",
            "schema": { "example": 10000, "type": "number" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Returns a CSV file with comm summary" },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans": {
      "get": {
        "operationId": "LoanController_searchLoanAccount_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "What page number do you want (0 indexed)",
            "schema": { "default": 0, "example": 0, "type": "number" }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "How many loans do you want per page",
            "schema": { "default": 20, "example": 20, "type": "number" }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "client id - Customer Service UUID maps to Mambu accountHolderId",
            "schema": {
              "example": "d8516038-0443-4e2f-98fa-7eedb5d83399",
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": false,
            "in": "query",
            "description": "entity id - Originator of the loan",
            "schema": {
              "example": "d8516038-0443-4e2f-98fa-7eedb5d83399",
              "type": "string"
            }
          },
          {
            "name": "accountState",
            "required": false,
            "in": "query",
            "description": "Loan Account Status",
            "schema": {
              "example": "ACTIVE",
              "type": "string",
              "enum": [
                "APPROVED",
                "ACTIVE",
                "CLOSED",
                "WITHDRAWN",
                "REJECTED",
                "PARTIAL_APPLICATION",
                "PENDING_APPROVAL",
                "ACTIVE_IN_ARREARS"
              ]
            }
          },
          {
            "name": "daysInArrears",
            "required": false,
            "in": "query",
            "description": "for between:- 17-30 for greaterThan: >90 for lessThan <50 for equal=10",
            "schema": { "example": ">70", "type": "string" }
          },
          {
            "name": "dishonours",
            "required": false,
            "in": "query",
            "description": "dishonours",
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeSchedule",
            "required": false,
            "in": "query",
            "schema": { "default": false, "example": false, "type": "boolean" }
          },
          {
            "name": "loanIds",
            "required": false,
            "in": "query",
            "description": "Get a list of specific loan accounts",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "stateChangeStart",
            "required": false,
            "in": "query",
            "description": "The start date for filtering loans that have transitioned to the specified state within this range.",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "stateChangeEnd",
            "required": false,
            "in": "query",
            "description": "The end date for filtering loans that have transitioned to the specified state within this range.",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan Accounts successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanAccountPaginationResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      },
      "post": {
        "operationId": "LoanController_createLoanAccount_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLoanAccountRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Loan Account successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanAccountResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}": {
      "patch": {
        "operationId": "LoanController_patchLoanAccount_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The Account ID of the loan to change",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchLoanAccountRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "Loan Account action posted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanAccountResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      },
      "get": {
        "operationId": "LoanController_getLoanAccount_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "includeProductConfig",
            "required": false,
            "in": "query",
            "schema": { "default": false, "example": false, "type": "boolean" }
          },
          {
            "name": "includeCostOfFund",
            "required": false,
            "in": "query",
            "schema": { "default": false, "example": false, "type": "boolean" }
          },
          {
            "name": "includeHistory",
            "required": false,
            "in": "query",
            "schema": { "default": false, "example": false, "type": "boolean" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan Accounts successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanAccountResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{loanAccountId}/transactions": {
      "get": {
        "operationId": "LoanController_getLoanAccountTransactions_v1",
        "parameters": [
          {
            "name": "loanAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "What page number do you want (0 indexed)",
            "schema": { "default": 0, "example": 0, "type": "number" }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "How many loans do you want per page",
            "schema": { "default": 20, "example": 20, "type": "number" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan Transactions returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTransactionsPaginatedResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{loanAccountId}/transactions/{transactionId}/credit": {
      "post": {
        "operationId": "LoanController_creditTransaction_v1",
        "parameters": [
          {
            "name": "loanAccountId",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": { "example": "8000", "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreditFeeRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Loan Transactions credited successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditFeeResponse" }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/installments": {
      "get": {
        "operationId": "LoanController_getLoanAccountInstallments_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan Installments returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLoanAccountInstallmentsResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/preview-settlement-quotes": {
      "get": {
        "operationId": "LoanController_getLoanAccountPayOffPreview_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Date from",
            "schema": {
              "format": "date-time",
              "example": "2024-05-10",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "Date to and including",
            "schema": {
              "format": "date-time",
              "example": "2024-05-10",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan Payoff Preview returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoanSettlementQuoteResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/settlement-quote": {
      "post": {
        "operationId": "LoanController_saveSettlementQuote_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveSettlementDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Loan Settlement quote saved successfully" },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "summary": "Save the Loan Settlement quote for a specific payoff date to a Loan Account.",
        "tags": ["Loan", "Loans"]
      },
      "get": {
        "operationId": "LoanController_getSettlementQuote_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Loan Settlement quote returned successfully"
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "summary": "Retrieve the settlement quote saved to a specific loan account.",
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/cost-of-funds": {
      "post": {
        "operationId": "LoanController_calculateCostOfFunds_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CostOfFundsRequestDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cost of funds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostOfFundResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/summaries": {
      "get": {
        "operationId": "LoanController_searchLoanSummaries_v1",
        "parameters": [
          {
            "name": "fromDate",
            "required": true,
            "in": "query",
            "description": "Start date for the loan summaries in the format YYYY-MM-DD",
            "schema": { "example": "2024-01-01", "type": "string" }
          },
          {
            "name": "toDate",
            "required": true,
            "in": "query",
            "description": "End date for the loan summaries in the format YYYY-MM-DD",
            "schema": { "example": "2024-12-31", "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan summaries between the given dates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoanAccountSummaryResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/send-summaries": {
      "post": {
        "operationId": "LoanController_sendLoanSummaries_v1",
        "parameters": [
          {
            "name": "forDate",
            "required": true,
            "in": "query",
            "description": "Date for which we want to resend the summary in the format YYYY-MM-DD",
            "schema": {
              "format": "date-time",
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Send loan summary to the service bus for a given date"
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/summary": {
      "get": {
        "operationId": "LoanController_getLoanSummaries_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "fromDate",
            "required": true,
            "in": "query",
            "description": "Start date for the loan summaries in the format YYYY-MM-DD",
            "schema": { "example": "2024-01-01", "type": "string" }
          },
          {
            "name": "toDate",
            "required": true,
            "in": "query",
            "description": "End date for the loan summaries in the format YYYY-MM-DD",
            "schema": { "example": "2024-12-31", "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan summaries between the given dates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoanAccountSummaryResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/disburse": {
      "post": {
        "operationId": "LoanController_addDisbursementDetails_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDisbursementDetailsRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Add disbursement details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDisbursementDetailsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      },
      "get": {
        "operationId": "LoanController_getDisbursementDetails_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Add disbursement details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDisbursementDetailsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/disburse/{disburseId}": {
      "post": {
        "operationId": "LoanController_disburseLoan_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "disburseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Disburse loan account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanAccountResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      },
      "patch": {
        "operationId": "LoanController_patchDisbursementDetails_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "disburseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDisbursementDetailsRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Add disbursement details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDisbursementDetailsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/events": {
      "get": {
        "operationId": "LoanController_pollEvents_v1",
        "parameters": [
          {
            "name": "topicEndpoints",
            "required": false,
            "in": "query",
            "description": "A comma delimitation string of topic endpoints",
            "schema": { "type": "string" }
          },
          {
            "name": "queueEndpoints",
            "required": false,
            "in": "query",
            "description": "A comma delimitation string of queue endpoints",
            "schema": {
              "example": "webhook_webhooks_to_mambu",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Poll events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollEventsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Events"]
      }
    },
    "/v1/loan-management/loans/eod": {
      "get": {
        "operationId": "LoanController_triggerEODProcessing_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Triggered eod processing" },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Events"]
      }
    },
    "/v1/loan-management/loans/{id}/make-payment": {
      "post": {
        "operationId": "LoanController_makePayment_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MakePaymentRequestDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Resulting state of target loan account" },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "summary": "Used for allocation payment against a loan account.",
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/reschedule": {
      "post": {
        "operationId": "LoanController_rescheduleLoanAccount_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RescheduleLoanRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rescheduled the loan account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RescheduleLoanResponse"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/jobs": {
      "get": {
        "operationId": "LoanController_getLoanAccountJobs_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "8a8987a88ea123fa018ea1b4fa683d5a",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan Account Jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoanAccountStateTransitionJobResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "summary": "Retrieve the loan state transition jobs for a specific loan account.",
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/loans/{id}/cancellable": {
      "get": {
        "description": "Returns whether the loan can be cancelled and any reasons why it cannot be cancelled.",
        "operationId": "LoanController_checkLoanCancellable_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns cancellable status and any reasons preventing cancellation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanCancellableResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "summary": "Check if a loan can be cancelled",
        "tags": ["Loan", "Loans"]
      }
    },
    "/v1/loan-management/configuration/loan-products": {
      "get": {
        "operationId": "LoanConfigController_getLoanProductConfig_v1",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "loan product response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanProductConfigurationDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["LoanConfig", "Configuration"]
      },
      "put": {
        "operationId": "LoanConfigController_updateLoanProductConfig_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoanProductConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Loan Product Config Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanProductConfigurationDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["LoanConfig", "Configuration"]
      }
    },
    "/v1/loan-management/configuration/custom-fields": {
      "get": {
        "operationId": "LoanConfigController_getCustomFieldsConfig_v1",
        "parameters": [
          {
            "name": "availableFor",
            "required": true,
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Fields Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldsConfigurationDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["LoanConfig", "Configuration"]
      },
      "put": {
        "operationId": "LoanConfigController_updateCustomFieldsConfig_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldsConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom Fields Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldsConfigurationDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["LoanConfig", "Configuration"]
      }
    },
    "/v1/loan-management/configuration/client-roles": {
      "get": {
        "operationId": "LoanConfigController_getClientRolesConfig_v1",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Client Roles Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRolesConfigurationDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["LoanConfig", "Configuration"]
      },
      "put": {
        "operationId": "LoanConfigController_updateClientRolesConfig_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRolesConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client Roles Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRolesConfigurationDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["LoanConfig", "Configuration"]
      }
    },
    "/v1/loan-management/loan-products": {
      "get": {
        "operationId": "ProductController_getLoanProducts_v1",
        "parameters": [
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "The criteria based on which the records will be sorted. Expected format is, for example field1:ASC,field2:DESC. Only the following fields can be used: ID, productName, creationDate, lastModifiedDate",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "loan products response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLoanProductsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Product", "Products"]
      }
    },
    "/v1/loan-management/loan-products/{id}": {
      "get": {
        "operationId": "ProductController_getLoanProduct_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "loan products response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLoanProductsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Product", "Products"]
      }
    },
    "/v1/loan-management/payment-waivers/{id}/calculate-premium": {
      "post": {
        "operationId": "PaymentWaiverController_calculatePremium_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentWaiverPremiumRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment waiver premium cost",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWaiverPremiumResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiver", "Payment Waiver"]
      }
    },
    "/v1/loan-management/payment-waivers/calculate-premiums": {
      "post": {
        "operationId": "PaymentWaiverController_calculatePremiums_v1",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentWaiverPremiumRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment waiver premium cost",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentWaiverPremiumResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiver", "Payment Waiver"]
      }
    },
    "/v1/loan-management/payment-waivers/calculate-rebate": {
      "post": {
        "operationId": "PaymentWaiverController_calculateRebate_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentWaiverRebateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calculate rebate for payment waiver",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWaiverRebateResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiver", "Payment Waiver"]
      }
    },
    "/v1/loan-management/configuration/loan-products/{id}/payment-waivers": {
      "post": {
        "operationId": "PaymentWaiverConfigurationController_addPaymentWaiverConfiguration_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentWaiverConfigurationRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment waiver configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWaiverConfigurationResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiverConfiguration", "Configuration"]
      },
      "get": {
        "operationId": "PaymentWaiverConfigurationController_getPaymentWaiverConfigurations_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment waiver configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentWaiverConfigurationResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiverConfiguration", "Configuration"]
      }
    },
    "/v1/loan-management/configuration/loan-products/{id}/payment-waivers/{waiverId}": {
      "get": {
        "operationId": "PaymentWaiverConfigurationController_getPaymentWaiverConfigurationById_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "waiverId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment waiver configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWaiverConfigurationResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiverConfiguration", "Configuration"]
      },
      "patch": {
        "operationId": "PaymentWaiverConfigurationController_updatePaymentWaiverConfiguration_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "waiverId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPaymentWaiverConfigurationRequestDto"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successfully deleted." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiverConfiguration", "Configuration"]
      },
      "delete": {
        "operationId": "PaymentWaiverConfigurationController_deletePaymentWaiverConfiguration_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "waiverId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Successfully deleted." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["PaymentWaiverConfiguration", "Configuration"]
      }
    },
    "/v1/loan-management/configuration/loan-products/{id}/fees": {
      "post": {
        "operationId": "FeeConfigurationController_addFeeConfiguration_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeeConfigurationRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Fee configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeConfigurationResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["FeeConfiguration", "Configuration"]
      },
      "get": {
        "operationId": "FeeConfigurationController_getFeeConfigurations_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "fee configuration responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFeeConfigurationResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["FeeConfiguration", "Configuration"]
      }
    },
    "/v1/loan-management/configuration/loan-products/{id}/fees/{feeId}": {
      "get": {
        "operationId": "FeeConfigurationController_getFeeConfigurationById_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "feeId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Fee configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeConfigurationResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["FeeConfiguration", "Configuration"]
      },
      "patch": {
        "operationId": "FeeConfigurationController_updateFeeConfiguration_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "feeId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchFeeConfigurationRequestDto"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successfully deleted." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["FeeConfiguration", "Configuration"]
      },
      "delete": {
        "operationId": "FeeConfigurationController_deleteFeeConfiguration_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "feeId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Successfully deleted." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["FeeConfiguration", "Configuration"]
      }
    },
    "/v1/loan-management/configuration/loan-products/{productId}/entities/{entityId}/fees": {
      "get": {
        "operationId": "FeeConfigurationController_getFeeConfigurationForEntity_v1",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "entityId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Fee configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEntityFeeConfigurationResponseDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "403": { "description": "Client is unauthorised." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["FeeConfiguration", "Configuration"]
      }
    },
    "/v1/loan-management/payments/process-repayments": {
      "post": {
        "operationId": "PaymentController_processRepayments_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRepaymentsRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "process repayment response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessRepaymentsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Payment", "Payments"]
      }
    },
    "/v1/loan-management/configuration/repayment-retry": {
      "post": {
        "operationId": "RepaymentRetryController_createRepaymentRetryConfig_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepaymentRetryConfigRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created repayment retry config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepaymentRetryConfigDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["RepaymentRetry"]
      },
      "get": {
        "operationId": "RepaymentRetryController_searchRepaymentRetryConfigs_v1",
        "parameters": [
          {
            "name": "dishonourCode",
            "required": false,
            "in": "query",
            "description": "The code returned by the bank telling us what type of dishonour this is",
            "schema": { "example": "DISHONOUR-03", "type": "string" }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "The product id this information is associated to",
            "schema": { "example": "USCC", "type": "string" }
          },
          {
            "name": "maximumRetries",
            "required": false,
            "in": "query",
            "description": "How many time you can retry on this code before stopping",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "isFatal",
            "required": false,
            "in": "query",
            "description": "Is this error fatal. Changes whether you freeze the loan or the installment",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found repayment retry configs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepaymentRetryConfigDto"
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["RepaymentRetry"]
      }
    },
    "/v1/loan-management/configuration/repayment-retry/{id}": {
      "get": {
        "operationId": "RepaymentRetryController_getRepaymentRetryConfig_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The repayment retry config id",
            "schema": {
              "example": "8f30baea-9ca4-4757-a267-0b0fc83a3724",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Found repayment retry config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepaymentRetryConfigDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["RepaymentRetry"]
      },
      "patch": {
        "operationId": "RepaymentRetryController_updateRepaymentRetryConfig_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The repayment retry config id",
            "schema": {
              "example": "8f30baea-9ca4-4757-a267-0b0fc83a3724",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepaymentRetryConfigRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated repayment retry config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepaymentRetryConfigDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["RepaymentRetry"]
      },
      "delete": {
        "operationId": "RepaymentRetryController_deleteRepaymentRetryConfig_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The repayment retry config id",
            "schema": {
              "example": "8f30baea-9ca4-4757-a267-0b0fc83a3724",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Deleted repayment retry config" },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["RepaymentRetry"]
      }
    },
    "/v1/loan-management/event/subscriptions": {
      "post": {
        "operationId": "EventStreamController_createEventStreamSubscription_v1",
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "Successfully Created Subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSubscriptionResponseDto"
                }
              }
            }
          },
          "204": { "description": "Successfully deleted." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["EventStream", "Event"]
      }
    },
    "/v1/loan-management/event/subscriptions/{id}": {
      "get": {
        "operationId": "EventStreamController_getDataFromEventStream_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the subscription to listen to events on",
            "schema": {
              "example": "0fa7e956-999f-44ff-97d4-d4dc853a9443",
              "type": "string"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "description": "Internal Request ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully streamed from loan management service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EventSchemaDto" }
                }
              }
            }
          },
          "204": { "description": "Successfully deleted." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "404": { "description": "Not found." },
          "406": { "description": "Not Acceptable." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["EventStream", "Event"]
      }
    },
    "/v1/loan-management/jobs/valid-jobs": {
      "get": {
        "operationId": "JobsController_getValidJobs_v1",
        "parameters": [],
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidJobResponseDto" }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs"]
      }
    },
    "/v1/loan-management/jobs": {
      "get": {
        "operationId": "JobsController_getJobs_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterJobResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs", "Jobs"]
      },
      "post": {
        "operationId": "JobsController_createJobs_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterJobDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterJobResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs"]
      }
    },
    "/v1/loan-management/jobs/{id}/history": {
      "get": {
        "operationId": "JobsController_getJobHistory_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit of items per page",
            "schema": { "example": 10, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobHistoryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs"]
      }
    },
    "/v1/loan-management/jobs/{id}": {
      "patch": {
        "operationId": "JobsController_getJob_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateJobDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterJobResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs"]
      },
      "delete": {
        "operationId": "JobsController_deleteJob_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Successful response." },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs"]
      }
    },
    "/v1/loan-management/jobs/{id}/trigger": {
      "get": {
        "operationId": "JobsController_triggerJob_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JobEntity" }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Jobs"]
      }
    },
    "/v1/loan-management/history-logs": {
      "get": {
        "operationId": "JobsController_getHistoryLogs_v1",
        "parameters": [
          {
            "name": "resourceType",
            "required": false,
            "in": "query",
            "description": "History Logs Resource Type",
            "schema": { "example": "WebhookEntity", "type": "string" }
          },
          {
            "name": "resourceId",
            "required": false,
            "in": "query",
            "description": "History Logs Resource id",
            "schema": {
              "example": "2acffb0a-b84a-4c13-aff2-9c2a26d05537",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit of items per page",
            "schema": { "example": 10, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryLogsResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["History Logs"]
      }
    },
    "/v1/loan-management/service-bus-events": {
      "get": {
        "operationId": "EventsController_getEvents_v1",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": { "example": 1, "type": "number" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit of items per page",
            "schema": { "example": 10, "type": "number" }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date of the events",
            "schema": { "example": "2021-01-01", "type": "string" }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date of the events",
            "schema": { "example": "2021-01-01", "type": "string" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status of the events",
            "schema": { "example": "completed", "type": "string" }
          },
          {
            "name": "endpoint",
            "required": false,
            "in": "query",
            "description": "Endpoint of the events",
            "schema": { "example": "some_endpoint", "type": "string" }
          },
          {
            "name": "topic",
            "required": false,
            "in": "query",
            "description": "Topic of the events",
            "schema": { "example": "some_topic", "type": "string" }
          },
          {
            "name": "queue",
            "required": false,
            "in": "query",
            "description": "Queue of the events",
            "schema": { "example": "some_queue", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEventResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Service Bus Events"]
      }
    },
    "/v1/loan-management/service-bus-events/{eventId}": {
      "get": {
        "operationId": "EventsController_getEvent_v1",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResponseDto" }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Service Bus Events"]
      }
    },
    "/v1/loan-management/service-bus-events/retry": {
      "post": {
        "operationId": "EventsController_retryEvent_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RetryEventDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRetryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Service Bus Events"]
      }
    },
    "/v1/loan-management/service-bus-events/current-state": {
      "post": {
        "operationId": "EventsController_triggerCurrentState_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerCurrentStateDto"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful response." },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRetryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Bad request." },
          "401": { "description": "Client is unauthenticated." },
          "500": { "description": "Internal Server Error." },
          "503": { "description": "Service Unavailable." }
        },
        "security": [
          { "x-entity-id": [] },
          { "x-entity-type": [] },
          { "x-user-id": [] },
          { "x-user-roles": [] },
          { "x-customer-group-ids": [] }
        ],
        "tags": ["Service Bus Events"]
      }
    }
  },
  "info": {
    "title": "loan-management",
    "description": "Set of APIs supported by loan management microservice",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "x-entity-id": {
        "type": "apiKey",
        "in": "header",
        "name": "x-entity-id"
      },
      "x-entity-type": {
        "type": "apiKey",
        "in": "header",
        "name": "x-entity-type"
      },
      "x-user-id": { "type": "apiKey", "in": "header", "name": "x-user-id" },
      "x-user-roles": {
        "type": "apiKey",
        "in": "header",
        "name": "x-user-roles"
      },
      "x-customer-group-ids": {
        "type": "apiKey",
        "in": "header",
        "name": "x-customer-group-ids"
      }
    },
    "schemas": {
      "LoanSchedulePreviewRequestDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "8a89872d8da895a5018da9cdf6f764b0",
            "description": "Id of the product for which we want to generate the preview code"
          },
          "loanAmount": {
            "type": "number",
            "example": 100000,
            "description": "Loan amount"
          },
          "interestRate": {
            "type": "number",
            "example": 10,
            "description": "Interest rate"
          },
          "loanTerm": {
            "type": "number",
            "example": 12,
            "description": "Loan term in months"
          },
          "repaymentCount": {
            "type": "number",
            "example": 12,
            "description": "The number of repayments you want to make"
          },
          "repaymentFrequency": {
            "type": "string",
            "example": "MONTHLY",
            "description": "Repayment Frequency",
            "enum": ["YEARLY", "MONTHLY", "FORTNIGHTLY", "WEEKLY", "DAILY"]
          },
          "disbursementDate": {
            "format": "date-time",
            "type": "string",
            "description": "Disbursement Date",
            "example": "2024-04-10T12:00:00+12:00"
          },
          "firstRepaymentDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the first Repayment",
            "example": "2024-05-10T12:00:00+12:00"
          },
          "periodicPaymentAmount": {
            "type": "number",
            "example": 1000,
            "description": "The periodic payment amount for the accounts which have balloon payments or Reduce Number of Installments"
          },
          "fees": {
            "description": "The Array of Fees",
            "example": [
              { "amount": 100, "id": "8a8987728ea96327018eab15a063009d" }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "plannedFees": {
            "description": "The Array of Planned Fees",
            "example": [
              { "amount": 100, "id": "8a8987ee8f015fc2018f02a6c5cc644c" }
            ],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "productId",
          "loanAmount",
          "interestRate",
          "repaymentFrequency",
          "disbursementDate",
          "firstRepaymentDate"
        ]
      },
      "InstallmentAmountDto": {
        "type": "object",
        "properties": {
          "due": {
            "type": "number",
            "description": "The amount due of the installment",
            "example": 1000
          },
          "expected": {
            "type": "number",
            "description": "The amount expected of the installment",
            "example": 1000
          },
          "expectedUnapplied": {
            "type": "number",
            "description": "The unapplied expected amount  of the installment, applicable for fees",
            "example": 1000
          },
          "paid": {
            "type": "number",
            "description": "The amount paid of the installment",
            "example": 1000
          }
        },
        "required": ["due", "expected", "expectedUnapplied", "paid"]
      },
      "LoanAmountDto": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The amount detail break down",
            "example": { "due": 1000, "expected": 50, "paid": 50 },
            "allOf": [{ "$ref": "#/components/schemas/InstallmentAmountDto" }]
          },
          "tax": {
            "description": "The amount detail break down",
            "example": { "due": 1000, "expected": 50, "paid": 50 },
            "allOf": [{ "$ref": "#/components/schemas/InstallmentAmountDto" }]
          }
        },
        "required": ["amount", "tax"]
      },
      "LoanInstallmentDto": {
        "type": "object",
        "properties": {
          "dueDate": {
            "format": "date-time",
            "type": "string",
            "description": "The due date of the installment",
            "example": "2024-01-01"
          },
          "fee": {
            "description": "The fee associated with the installment",
            "example": {
              "amount": { "due": 1000, "expected": 50, "paid": 50 },
              "tax": { "due": 1000, "expected": 50, "paid": 50 }
            },
            "allOf": [{ "$ref": "#/components/schemas/LoanAmountDto" }]
          },
          "interest": {
            "description": "The interest on the installment",
            "example": {
              "amount": { "due": 1000, "expected": 50, "paid": 50 },
              "tax": { "due": 1000, "expected": 50, "paid": 50 }
            },
            "allOf": [{ "$ref": "#/components/schemas/LoanAmountDto" }]
          },
          "isPaymentHoliday": {
            "type": "boolean",
            "description": "Indicates if the installment is a payment holiday",
            "example": false
          },
          "number": {
            "type": "string",
            "description": "The number of the installment",
            "example": "001"
          },
          "penalty": {
            "description": "The penalty on the installment",
            "example": {
              "amount": { "due": 1000, "expected": 50, "paid": 50 },
              "tax": { "due": 1000, "expected": 50, "paid": 50 }
            },
            "allOf": [{ "$ref": "#/components/schemas/LoanAmountDto" }]
          },
          "principal": {
            "description": "The principal amount of the installment",
            "example": {
              "amount": { "due": 1000, "expected": 50, "paid": 50 },
              "tax": { "due": 1000, "expected": 50, "paid": 50 }
            },
            "allOf": [{ "$ref": "#/components/schemas/LoanAmountDto" }]
          },
          "state": {
            "type": "string",
            "description": "The state of the installment",
            "enum": ["PENDING", "PAID", "LATE", "PARTIALLY_PAID", "GRACE"],
            "example": "PAID"
          },
          "installmentTotal": {
            "type": "number",
            "description": "The total Amount to pay for the installment",
            "example": 11000
          },
          "externalReferenceId": {
            "type": "string",
            "description": "The external reference id of the installment",
            "example": "id123"
          }
        },
        "required": [
          "dueDate",
          "fee",
          "interest",
          "isPaymentHoliday",
          "number",
          "penalty",
          "principal",
          "state",
          "installmentTotal",
          "externalReferenceId"
        ]
      },
      "LoanSchedulePreviewResponseDto": {
        "type": "object",
        "properties": {
          "totalPrincipal": {
            "type": "number",
            "description": "The total Principal to pay",
            "example": 11000
          },
          "totalFees": {
            "type": "number",
            "description": "The total fees to pay",
            "example": 11000
          },
          "totalPenalties": {
            "type": "number",
            "description": "The total penalties to pay",
            "example": 1000
          },
          "totalInterest": {
            "type": "number",
            "description": "The total Interest to pay",
            "example": 1000
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the loan",
            "example": "NZD"
          },
          "installments": {
            "description": "The list of installments for the loan",
            "example": [],
            "type": "array",
            "items": { "$ref": "#/components/schemas/LoanInstallmentDto" }
          }
        },
        "required": [
          "totalPrincipal",
          "totalFees",
          "totalPenalties",
          "totalInterest",
          "currencyCode",
          "installments"
        ]
      },
      "LoanAccountPaginationResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanAccountPaginationResponseDto"
            }
          },
          "count": { "type": "number", "description": "total loans" },
          "totalPages": {
            "type": "number",
            "description": "total pages for the pagination"
          },
          "currentPage": {
            "type": "number",
            "description": "current page of the pagination"
          }
        },
        "required": ["data", "count", "totalPages", "currentPage"]
      },
      "LoanAccountFeeDistributionDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of this portion",
            "example": 100
          },
          "resourceId": {
            "type": "string",
            "description": "The id of the resource",
            "example": "0217c359-305a-406a-87c2-28695d923cd3"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource",
            "example": "CUSTOMER",
            "enum": ["CUSTOMER", "ENTITY"]
          },
          "usedFor": {
            "type": "string",
            "description": "The use for the portion. Only used when a specific resource has more than one distribution",
            "example": "PW_RESERVE",
            "enum": [
              "ADMIN",
              "DISBURSEMENT",
              "FEES",
              "GST",
              "INTEREST",
              "PW_ADVANCE",
              "PW_RESERVE",
              "REPAYMENT"
            ]
          },
          "gst": {
            "type": "number",
            "description": "The amount of GST for this distribution",
            "example": 5
          }
        },
        "required": ["amount", "resourceId", "resourceType"]
      },
      "FeeDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "example": 100,
            "description": "The Amount of the fee"
          },
          "id": {
            "type": "string",
            "example": "8a8987728ea96327018eab15a063009d",
            "description": "The external reference Id of the fee"
          },
          "distribution": {
            "description": "The distribution of the fee",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanAccountFeeDistributionDto"
            }
          }
        },
        "required": ["amount", "id", "distribution"]
      },
      "CreateLoanAccountRequestDto": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "example": "MTF",
            "description": "The source of the loan",
            "enum": ["MTF", "TLP"]
          },
          "loanName": {
            "type": "string",
            "example": "Personal Loan",
            "description": "Loan Name"
          },
          "clientId": {
            "type": "string",
            "example": "902bd186-8235-48df-bbe8-eeac3c2a6901",
            "description": "Client ID which is used to create Client."
          },
          "clientType": {
            "type": "string",
            "example": "CUSTOMER",
            "description": "Client Type in Mambu",
            "enum": ["CUSTOMER", "CUSTOMER_GROUP"]
          },
          "productId": {
            "type": "string",
            "example": "8a89872d8da895a5018da9cdf6f764b0",
            "description": "Id of the product for which we want to generate the preview code"
          },
          "loanAmount": {
            "type": "number",
            "example": 100000,
            "description": "Loan amount"
          },
          "interestRate": {
            "type": "number",
            "example": 10,
            "description": "Interest rate"
          },
          "loanTerm": {
            "type": "number",
            "example": 12,
            "description": "Loan term in months"
          },
          "repaymentFrequency": {
            "type": "string",
            "example": "MONTHLY",
            "description": "Repayment Frequency",
            "enum": ["YEARLY", "MONTHLY", "FORTNIGHTLY", "WEEKLY", "DAILY"]
          },
          "disbursementDate": {
            "format": "date-time",
            "type": "string",
            "description": "Disbursement Date",
            "example": "2024-04-10T12:00:00+12:00"
          },
          "firstRepaymentDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the first Repayment",
            "example": "2024-05-10T12:00:00+12:00"
          },
          "fees": {
            "description": "The Array of Fees",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeeDto" }
          },
          "paymentWaiverConfigId": {
            "type": "string",
            "description": "The id of the Payment Waiver Config",
            "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity associated with the loan",
            "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee"
          },
          "fundingSourceId": {
            "type": "string",
            "description": "The id of the funding source associated with the loan",
            "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee"
          },
          "businessUnitId": {
            "type": "string",
            "description": "The id of the business unit source associated with the loan",
            "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee"
          }
        },
        "required": [
          "loanName",
          "productId",
          "loanAmount",
          "interestRate",
          "loanTerm",
          "repaymentFrequency",
          "disbursementDate",
          "firstRepaymentDate"
        ]
      },
      "GetLoanAccountBalancesDto": {
        "type": "object",
        "properties": {
          "principalDue": {
            "type": "number",
            "description": "Total principalDue",
            "example": 10
          },
          "principalBalance": {
            "type": "number",
            "description": "Total principalBalance",
            "example": 10
          },
          "interestDue": {
            "type": "number",
            "description": "Total interestDue",
            "example": 10
          },
          "interestBalance": {
            "type": "number",
            "description": "Total interestBalance",
            "example": 10
          },
          "feesBalance": {
            "type": "number",
            "description": "Total feesBalance",
            "example": 10
          },
          "feesDue": {
            "type": "number",
            "description": "Total feesDue",
            "example": 10
          },
          "penaltyBalance": {
            "type": "number",
            "description": "Total penaltyBalance",
            "example": 10
          },
          "penaltyDue": {
            "type": "number",
            "description": "Total penaltyDue",
            "example": 10
          },
          "redrawBalance": {
            "type": "number",
            "description": "Total Redraw Balance",
            "example": 10
          },
          "interestFromArrearsDue": {
            "type": "number",
            "description": "Total Interest From Arrears Due",
            "example": 10
          }
        },
        "required": [
          "principalDue",
          "principalBalance",
          "interestDue",
          "interestBalance",
          "feesBalance",
          "feesDue",
          "penaltyBalance",
          "penaltyDue",
          "redrawBalance",
          "interestFromArrearsDue"
        ]
      },
      "ProductConfigurationDto": { "type": "object", "properties": {} },
      "GetLoanAccountPwDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Payment Waiver TYPE (PWR, PPI, NONE)",
            "example": "PWR"
          },
          "code": {
            "type": "string",
            "description": "Payment Waiver Code",
            "example": "SILVER_PLUS"
          },
          "description": {
            "type": "string",
            "description": "Payment Waiver Description",
            "example": "Silver Plus"
          }
        }
      },
      "LoanAccountDetails": {
        "type": "object",
        "properties": {
          "loanAccountId": {
            "type": "string",
            "description": "Associated Loan Account ID",
            "example": "8a8986dd930105ba0193014293691e10"
          }
        },
        "required": ["loanAccountId"]
      },
      "CostOfFundResponseDto": {
        "type": "object",
        "properties": {
          "fundsToAllocate": {
            "type": "number",
            "description": "Funds to allocate for the given period",
            "example": 1000
          },
          "fromDate": {
            "format": "date-time",
            "type": "string",
            "description": "date from which COF needs to be calculated",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "toDate": {
            "format": "date-time",
            "type": "string",
            "description": "date till which COF needs to be calculated",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "costOfFund": {
            "type": "number",
            "description": "cost of fund",
            "example": 1000
          },
          "dailyCostOfFund": {
            "type": "number",
            "description": "daily cost of fund",
            "example": 10
          },
          "loanAccountDetails": {
            "description": "Loan Account Details",
            "allOf": [{ "$ref": "#/components/schemas/LoanAccountDetails" }]
          }
        },
        "required": [
          "fundsToAllocate",
          "fromDate",
          "toDate",
          "costOfFund",
          "dailyCostOfFund",
          "loanAccountDetails"
        ]
      },
      "LoanHistoryDto": { "type": "object", "properties": {} },
      "LoanAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "8a8987a88ea123fa018ea1b4fa683d5a",
            "description": "Loan Encoded ID"
          },
          "externalReferenceId": {
            "type": "string",
            "description": "External Reference ID",
            "example": "LP-00001-0001"
          },
          "externalReferenceType": {
            "type": "string",
            "description": "Location of the External Reference",
            "example": "Mambu"
          },
          "loanType": {
            "type": "string",
            "description": "Location of the External Reference",
            "example": "unsecured"
          },
          "productId": {
            "type": "string",
            "example": "8a89872d8da895a5018da9cdf6f764b0",
            "description": "Id of the product for which we want to generate the preview code"
          },
          "productCode": {
            "type": "string",
            "example": "USCC",
            "description": "The code of the product"
          },
          "source": {
            "type": "string",
            "example": "MTF",
            "description": "The source of the loan",
            "enum": ["MTF", "TLP"]
          },
          "clientId": {
            "type": "string",
            "example": "ba065bee-f469-4856-9dd1-4865939bf3b0",
            "description": "Client ID which is used to create Client"
          },
          "clientType": {
            "type": "string",
            "example": "CUSTOMER",
            "description": "Client Type in Mambu",
            "enum": ["CUSTOMER", "CUSTOMER_GROUP"]
          },
          "loanName": {
            "type": "string",
            "example": "Personal Loan",
            "description": "Loan Name"
          },
          "loanTerm": {
            "type": "number",
            "example": 12,
            "description": "Loan term in months"
          },
          "disbursementDate": {
            "format": "date-time",
            "type": "string",
            "description": "Disbursement Date",
            "example": "2024-04-10T12:00:00+12:00"
          },
          "firstRepaymentDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the first Repayment",
            "example": "2024-05-10T12:00:00+12:00"
          },
          "loanAmount": {
            "type": "number",
            "example": 100000,
            "description": "Loan amount"
          },
          "repaymentCount": {
            "type": "number",
            "example": 12,
            "description": "The number of repayments you want to make"
          },
          "repaymentFrequency": {
            "type": "string",
            "example": "MONTHLY",
            "description": "Repayment Frequency",
            "enum": ["YEARLY", "MONTHLY", "FORTNIGHTLY", "WEEKLY", "DAILY"]
          },
          "interestRate": {
            "type": "number",
            "example": 10,
            "description": "Interest rate"
          },
          "interestSpread": {
            "type": "number",
            "example": 10,
            "description": "This is the margin (interest rate - buyer rate)"
          },
          "fees": {
            "description": "The Array of Fees",
            "example": [
              { "amount": 100, "id": "8a8987728ea96327018eab15a063009d" }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "plannedFees": {
            "description": "The Array of Planned Fees",
            "example": [
              { "amount": 100, "id": "8a8987ee8f015fc2018f02a6c5cc644c" }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "approvedDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date the loan account was approved.\t",
            "example": "2024-04-03T18:26:23+13:00"
          },
          "closedDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date the loan was closed.\t\t",
            "example": "2024-04-03T18:26:23+13:00"
          },
          "balances": {
            "$ref": "#/components/schemas/GetLoanAccountBalancesDto"
          },
          "paymentWaiverFees": {
            "type": "number",
            "description": "The total payment waiver premium associated with the loan",
            "example": 1000
          },
          "installments": {
            "description": "The list of installments for the loan",
            "example": [],
            "type": "array",
            "items": { "$ref": "#/components/schemas/LoanInstallmentDto" }
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity associated with the loan",
            "example": "de99e3b0-40de-42fa-85bb-d20144ad52ee"
          },
          "fundingSourceId": {
            "type": "string",
            "description": "Funder of the loan account",
            "example": "ec6795f6-1614-4a9a-915d-ebfad8131242"
          },
          "businessUnitId": {
            "type": "string",
            "description": "Business Unit of the loan account",
            "example": "ec6795f6-1614-4a9a-915d-ebfad8131242"
          },
          "productConfig": {
            "description": "The full config of our products and fees at time of loan creation",
            "allOf": [
              { "$ref": "#/components/schemas/ProductConfigurationDto" }
            ]
          },
          "totalAdvance": {
            "type": "number",
            "description": "The total advance of the loan account",
            "example": 1000
          },
          "totalInterest": {
            "type": "number",
            "description": "The total interest of the loan account",
            "example": 1000
          },
          "totalDue": {
            "type": "number",
            "description": "The due of the loan account",
            "example": 1000
          },
          "lastInterestAccrued": {
            "type": "number",
            "description": "The last interest accrued by the Loan Account",
            "example": 5
          },
          "accruedInterest": {
            "type": "number",
            "description": "The accrued interest of the Loan Account",
            "example": 5
          },
          "interestFromArrearsAccrued": {
            "type": "number",
            "description": "The total interest from arrears accrued by the Loan Account",
            "example": 5
          },
          "totalAdminFees": {
            "type": "number",
            "description": "The total admin fees of the loan account",
            "example": 1000
          },
          "totalAmountToPay": {
            "type": "number",
            "description": "The total amount to pay",
            "example": 1000
          },
          "accountState": {
            "type": "string",
            "example": "ACTIVE",
            "description": "What state is the loan account in"
          },
          "accountSubState": {
            "type": "string",
            "example": "LOCKED",
            "description": "What sub state is the loan account in"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation Date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update Date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "paymentWaiverDetails": {
            "description": "Payment Waiver Product Details",
            "allOf": [{ "$ref": "#/components/schemas/GetLoanAccountPwDto" }]
          },
          "costOfFund": {
            "description": "Cost Of Fund Data",
            "allOf": [{ "$ref": "#/components/schemas/CostOfFundResponseDto" }]
          },
          "maturityDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date the loan matures",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "loanVariationHistory": {
            "description": "Contains variation history",
            "example": [
              {
                "encodedKey": "8a8987a88ea123fa018ea1b4fa683d5a",
                "creationDate": "2024-01-01T00:00:00.000Z",
                "closedDate": "2024-01-01T00:00:00.000Z"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/LoanHistoryDto" }
          },
          "debitsLocked": {
            "type": "boolean",
            "description": "Can the loan account be debited",
            "example": false
          },
          "debitsLockedUntil": {
            "format": "date-time",
            "type": "string",
            "description": "When will the debits be unlocked",
            "example": "2025-01-10T00:00:00.000Z"
          },
          "debitsLockedReason": {
            "type": "string",
            "description": "Why are the debits locked",
            "example": "DISHONOUR-01"
          },
          "lockedInstallments": {
            "description": "Ids of any instalment that can't be processed",
            "example": ["8a8986af96c69a230196c7dbe8066e69"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "id",
          "externalReferenceId",
          "externalReferenceType",
          "loanType",
          "productId",
          "productCode",
          "clientId",
          "clientType",
          "loanName",
          "disbursementDate",
          "firstRepaymentDate",
          "loanAmount",
          "repaymentFrequency",
          "interestRate",
          "interestSpread",
          "approvedDate",
          "closedDate",
          "balances",
          "paymentWaiverFees",
          "installments",
          "entityId",
          "fundingSourceId",
          "businessUnitId",
          "productConfig",
          "totalAdvance",
          "totalInterest",
          "totalDue",
          "lastInterestAccrued",
          "accruedInterest",
          "interestFromArrearsAccrued",
          "totalAdminFees",
          "totalAmountToPay",
          "accountState",
          "createdAt",
          "updatedAt",
          "paymentWaiverDetails",
          "costOfFund",
          "maturityDate",
          "loanVariationHistory",
          "debitsLocked",
          "debitsLockedUntil",
          "debitsLockedReason",
          "lockedInstallments"
        ]
      },
      "DebitsLockedDetails": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The Reason for locking the debits",
            "example": "CUSTOMER_REQUEST",
            "enum": ["CUSTOMER_REQUEST", "HARDSHIP", "PW_CLAIM"]
          },
          "lockedUntil": {
            "format": "date-time",
            "type": "string",
            "description": "How long it should be locked to. Indefinite if not provided.",
            "example": "2025-01-10T00:00:00.000Z"
          }
        },
        "required": ["reason"]
      },
      "PatchLoanAccountRequestDto": {
        "type": "object",
        "properties": {
          "stateAction": {
            "type": "string",
            "enum": ["APPROVE", "CANCEL", "REQUEST_APPROVAL", "UNDO_CLOSE"],
            "example": "APPROVE",
            "description": "New state for the Loan Account"
          },
          "notes": {
            "type": "string",
            "description": "Any notes to attach to the action",
            "example": ""
          },
          "debitsLocked": {
            "type": "boolean",
            "description": "If we can debit the loan account",
            "example": false
          },
          "debitsLockedDetails": {
            "description": "The reason a loan is locked, and for how long",
            "allOf": [{ "$ref": "#/components/schemas/DebitsLockedDetails" }]
          }
        }
      },
      "TransactionBalanceResponseDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "total balance",
            "example": 10
          },
          "due": {
            "type": "number",
            "description": "balance due",
            "example": 10
          }
        },
        "required": ["total", "due"]
      },
      "TransactionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction ID",
            "example": "8a8986dd930105ba0193014293691e10"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation Date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "description": {
            "type": "string",
            "example": "DISBURSEMENT",
            "description": "description of the current transaction"
          },
          "amount": {
            "type": "number",
            "example": 100,
            "description": "Amount credited / debited from the account"
          },
          "balances": {
            "$ref": "#/components/schemas/TransactionBalanceResponseDto"
          },
          "type": { "type": "string", "description": "Type of Transaction" },
          "fees": {
            "description": "Fee Details of transaction",
            "type": "array",
            "items": { "type": "string" }
          },
          "notes": { "type": "string", "description": "Transaction Notes" }
        },
        "required": ["id", "createdAt", "description", "amount", "balances"]
      },
      "GetTransactionsPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TransactionResponseDto" }
          },
          "count": { "type": "number", "description": "total transactions" },
          "totalPages": {
            "type": "number",
            "description": "total pages for the pagination"
          },
          "currentPage": {
            "type": "number",
            "description": "current page of the pagination"
          }
        },
        "required": ["data", "count", "totalPages", "currentPage"]
      },
      "CreditFeeRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for crediting the fee"
          }
        }
      },
      "CreditFeeResponse": {
        "type": "object",
        "properties": {
          "creditTransactionId": {
            "type": "string",
            "description": "The ID of the new credit transaction"
          }
        },
        "required": ["creditTransactionId"]
      },
      "GetLoanAccountInstallmentsAmounts": {
        "type": "object",
        "properties": {
          "principal": {
            "type": "number",
            "example": 500,
            "description": "The amount of principal"
          },
          "interest": {
            "type": "number",
            "example": 100,
            "description": "The amount of interest"
          },
          "penalty": {
            "type": "number",
            "example": 50,
            "description": "The amount of penalty"
          },
          "fee": {
            "type": "number",
            "example": 7.5,
            "description": "The amount of fees"
          },
          "total": {
            "type": "number",
            "example": 657.5,
            "description": "The total amounts"
          }
        },
        "required": ["principal", "interest", "penalty", "fee", "total"]
      },
      "GetLoanAccountInstallmentsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "8a8987298f501814018f5651c1241620",
            "description": "The id of the installment"
          },
          "number": {
            "type": "string",
            "example": "1",
            "description": "The order number of the installment"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string",
            "example": "2024-07-01",
            "description": "The due date"
          },
          "lastPaidDate": {
            "format": "date-time",
            "type": "string",
            "example": "2024-07-01",
            "description": "The date the last repayment was made"
          },
          "repaidDate": {
            "format": "date-time",
            "type": "string",
            "example": "2024-07-01",
            "description": "The date the final repayment was made"
          },
          "state": {
            "type": "string",
            "example": "PENDING",
            "description": "The state"
          },
          "paidAmounts": {
            "description": "The different amounts paid on the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetLoanAccountInstallmentsAmounts"
              }
            ]
          },
          "dueAmounts": {
            "description": "The different amounts left to pay on the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetLoanAccountInstallmentsAmounts"
              }
            ]
          },
          "feeDetails": {
            "description": "A break down of the fees on the installment",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "id",
          "number",
          "dueDate",
          "lastPaidDate",
          "repaidDate",
          "state",
          "paidAmounts",
          "dueAmounts",
          "feeDetails"
        ]
      },
      "LoanSettlementQuoteResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the settlement Quote"
          },
          "loanAccountId": {
            "type": "string",
            "description": "Associated Loan Account ID"
          },
          "quoteDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date Settlement Quote was requested",
            "example": "2024-10-11T13:00:00+13:00"
          },
          "expiryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of Quote Expiration",
            "example": "2024-10-11T13:00:00+13:00"
          },
          "earlyRepaymentCharge": {
            "type": "number",
            "description": "Charge for Early Repayment",
            "example": 0
          },
          "feeBalance": {
            "type": "number",
            "description": "Fee Balance",
            "example": 0
          },
          "interestBalance": {
            "type": "number",
            "description": "Interest Balance",
            "example": 16.44
          },
          "penaltyBalance": {
            "type": "number",
            "description": "Penalty Balance",
            "example": 0
          },
          "principalBalance": {
            "type": "number",
            "description": "Loan's Principal Balance",
            "example": 2000
          },
          "redrawBalance": {
            "type": "number",
            "description": "Redraw balance",
            "example": 2016.44
          },
          "accruedInterest": {
            "type": "number",
            "description": "Interest accrued",
            "example": 2.44
          },
          "interestFromArrearsAccrued": {
            "type": "number",
            "description": "Interest from arrears accrued",
            "example": 2.44
          },
          "totalBalance": {
            "type": "number",
            "description": "Current Total Balance",
            "example": 2016.44
          },
          "pwRebate": {
            "type": "number",
            "description": "PW Rebate",
            "example": 20
          }
        },
        "required": [
          "id",
          "loanAccountId",
          "quoteDate",
          "expiryDate",
          "earlyRepaymentCharge",
          "feeBalance",
          "interestBalance",
          "penaltyBalance",
          "principalBalance",
          "redrawBalance",
          "accruedInterest",
          "interestFromArrearsAccrued",
          "totalBalance",
          "pwRebate"
        ]
      },
      "SaveSettlementDto": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date to save Settlement Quote, Defaults to Today",
            "example": "2024-05-10"
          }
        }
      },
      "CostOfFundsRequestDto": {
        "type": "object",
        "properties": {
          "fundsToAllocate": {
            "type": "number",
            "description": "Funds to allocate for the given period",
            "example": 1000
          },
          "fromDate": {
            "format": "date-time",
            "type": "string",
            "description": "date from which COF needs to be calculated",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "toDate": {
            "format": "date-time",
            "type": "string",
            "description": "date till which COF needs to be calculated",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "loanAccountIds": {
            "description": "The ids of the loan accounts to get summaries for",
            "example": ["8a8987a88ea123fa018ea1b4fa683d5a"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["fundsToAllocate", "fromDate", "toDate"]
      },
      "LoanAccountSummaryResponseDto": {
        "type": "object",
        "properties": {
          "loanAccountId": {
            "type": "string",
            "description": "loan account id",
            "example": "8a8987a88ea123fa018ea1b4fa683d5a"
          },
          "entityId": {
            "type": "string",
            "description": "id of the associated entity",
            "example": "1eed562b-ad03-4438-a392-2682890e3609"
          },
          "interestRate": {
            "type": "number",
            "description": "interest rate",
            "example": 10
          },
          "buyRate": {
            "type": "number",
            "description": "buyer rate",
            "example": 10
          },
          "accountState": {
            "type": "string",
            "description": "status of the loan account",
            "example": "ACTIVE"
          },
          "accountSubState": {
            "type": "string",
            "description": "sub status of the loan account",
            "example": "PENDING_APPROVAL"
          },
          "loanAmount": {
            "type": "number",
            "description": "loan amount",
            "example": 1000
          },
          "closedDate": {
            "format": "date-time",
            "type": "string",
            "description": "loan closed date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "creationDate": {
            "format": "date-time",
            "type": "string",
            "description": "loan created date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string",
            "description": "loan modified date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "daysInArrears": {
            "type": "number",
            "description": "days in arrears",
            "example": 10
          }
        },
        "required": [
          "loanAccountId",
          "entityId",
          "interestRate",
          "buyRate",
          "accountState",
          "accountSubState",
          "loanAmount",
          "closedDate",
          "creationDate",
          "lastModifiedDate",
          "daysInArrears"
        ]
      },
      "DisbursementDistributionMetadata": {
        "type": "object",
        "properties": {
          "particulars": {
            "type": "string",
            "description": "The particulars of the disbursement",
            "example": "123456123456"
          },
          "code": {
            "type": "string",
            "description": "The code of the disbursement",
            "example": "123456123456"
          },
          "reference": {
            "type": "string",
            "description": "The reference of the disbursement",
            "example": "123456123456"
          }
        }
      },
      "DisbursementDistribution": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of the portion",
            "example": 2000
          },
          "resourceId": {
            "type": "string",
            "description": "The id of the resource who is being paid this portion",
            "example": "d38867d6-1c0e-435f-bf95-308153b2595d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of resource who is being paid",
            "example": "ENTITY",
            "enum": ["CUSTOMER", "ENTITY"]
          },
          "paymentSourceId": {
            "type": "string",
            "description": "The id of the payment source",
            "example": "d38867d6-1c0e-435f-bf95-308153b2595d"
          },
          "metadata": {
            "description": "The metadata of the disbursement",
            "allOf": [
              {
                "$ref": "#/components/schemas/DisbursementDistributionMetadata"
              }
            ]
          }
        },
        "required": ["amount", "resourceId", "resourceType", "metadata"]
      },
      "AddDisbursementDetailsRequestDto": {
        "type": "object",
        "properties": {
          "distribution": {
            "description": "The details of how to split the disbursement",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DisbursementDistribution" }
          }
        },
        "required": ["distribution"]
      },
      "GetDisbursementDetailsResponseDto": {
        "type": "object",
        "properties": {
          "distribution": {
            "description": "The details of how to split the disbursement",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DisbursementDistribution" }
          },
          "id": {
            "type": "string",
            "example": "045238c9-8f3f-452a-8bb1-466371de44ea",
            "description": "Id of disbursement distribution"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation Date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update Date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the object",
            "example": "045238c9-8f3f-452a-8bb1-466371de44ea"
          },
          "updatedBy": {
            "type": "string",
            "description": "ID of the user who updated the object",
            "example": "045238c9-8f3f-452a-8bb1-466371de44ea"
          },
          "disbursementDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date to disburse the loan",
            "example": "2024-01-10T00:00:00.000Z"
          }
        },
        "required": [
          "distribution",
          "id",
          "createdAt",
          "updatedAt",
          "createdBy",
          "updatedBy",
          "disbursementDate"
        ]
      },
      "PatchDisbursementDetailsRequestDto": {
        "type": "object",
        "properties": {
          "distribution": {
            "description": "The details of how to split the disbursement",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DisbursementDistribution" }
          }
        },
        "required": ["distribution"]
      },
      "PollEventsResponseDto": {
        "type": "object",
        "properties": {
          "totalEventsPolled": {
            "type": "number",
            "description": "The events polled",
            "example": 10
          },
          "totalEventsFailed": {
            "type": "number",
            "description": "The events failed",
            "example": 10
          }
        },
        "required": ["totalEventsPolled", "totalEventsFailed"]
      },
      "MakePaymentRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Payment value",
            "example": 200
          },
          "settlementQuoteId": {
            "type": "string",
            "description": "Whether or not this payment is intended to settle the transaction",
            "example": "abc123"
          },
          "notes": {
            "type": "string",
            "description": "Any notes to be associated with payment",
            "example": "Note String"
          }
        }
      },
      "RescheduleLoanRequest": {
        "type": "object",
        "properties": {
          "repaymentFrequency": {
            "type": "string",
            "description": "The new frequency to pay the loan at",
            "example": "MONTHLY",
            "enum": ["YEARLY", "MONTHLY", "FORTNIGHTLY", "WEEKLY", "DAILY"]
          },
          "nextPaymentDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date of the next payment",
            "example": "2025-03-09T00:00:00+13:00"
          },
          "isPreview": {
            "type": "boolean",
            "description": "Is this a preview. If true, will not reschedule the loan.",
            "example": true,
            "default": true
          }
        },
        "required": ["repaymentFrequency", "nextPaymentDate"]
      },
      "RescheduleLoanDetails": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "description": "The new frequency to repay the loan at",
            "example": "MONTHLY",
            "enum": ["YEARLY", "MONTHLY", "FORTNIGHTLY", "WEEKLY", "DAILY"]
          },
          "nextPaymentDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date of the next repayment",
            "example": "2025-10-10T00:00:00.000Z"
          },
          "installmentAmount": {
            "type": "number",
            "description": "The amount of installments",
            "example": 174.22
          },
          "remainingInstallments": {
            "type": "number",
            "description": "How many installments are remaining",
            "example": 11
          },
          "maintenanceFee": {
            "type": "number",
            "description": "How much maintenance fee is charged per installment",
            "example": 1.96
          },
          "lastPaymentDate": {
            "format": "date-time",
            "type": "string",
            "description": "When the last payment will be made",
            "example": "2025-12-12T00:00:00.000Z"
          },
          "totalAmountToPay": {
            "type": "number",
            "description": "The total amount left to pay",
            "example": 11000
          },
          "totalInterest": {
            "type": "number",
            "description": "The total interest this loan will accumulate",
            "example": 500
          },
          "totalFees": {
            "type": "number",
            "description": "The total fees this loan will accumulate",
            "example": 500
          }
        },
        "required": [
          "frequency",
          "nextPaymentDate",
          "installmentAmount",
          "remainingInstallments",
          "maintenanceFee",
          "lastPaymentDate",
          "totalAmountToPay",
          "totalInterest",
          "totalFees"
        ]
      },
      "RescheduleLoanResponse": {
        "type": "object",
        "properties": {
          "previousDetails": {
            "description": "The previous loan accounts details",
            "allOf": [{ "$ref": "#/components/schemas/RescheduleLoanDetails" }]
          },
          "rescheduledDetails": {
            "description": "The rescheduled loan accounts details",
            "allOf": [{ "$ref": "#/components/schemas/RescheduleLoanDetails" }]
          },
          "differenceToPay": {
            "type": "number",
            "description": "The difference between the total amount to pay for previous and rescheduled loan account",
            "example": 6
          }
        },
        "required": ["previousDetails", "rescheduledDetails", "differenceToPay"]
      },
      "LoanAccountStateTransitionJobResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Loan Account State Transition ID",
            "example": "8a8986dd930105ba0193014293691e10"
          },
          "loanAccountDetailsId": {
            "type": "string",
            "description": "Loan Account ID",
            "example": "8a8986dd930105ba0193014293691e10"
          },
          "currentState": {
            "type": "string",
            "description": "Current State of the Loan Account",
            "example": "ACTIVE"
          },
          "currentSubState": {
            "type": "string",
            "description": "Current Sub State of the Loan Account",
            "example": "REFINANCED"
          },
          "targetState": {
            "type": "string",
            "description": "Target State of the Loan Account",
            "example": "CLOSED"
          },
          "targetSubState": {
            "type": "string",
            "description": "Target Sub State of the Loan Account",
            "example": "WITHDRAWN"
          },
          "status": {
            "type": "string",
            "description": "Status of the Loan Account State Transition",
            "example": "PENDING"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the Loan Account State Transition",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the Loan Account State Transition",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the Loan Account State Transition",
            "example": "60a9e9eb-e57c-4abf-9342-cb058739529e"
          },
          "updatedBy": {
            "type": "string",
            "description": "Who updated the Loan Account State Transition",
            "example": "60a9e9eb-e57c-4abf-9342-cb058739529e"
          }
        },
        "required": [
          "id",
          "loanAccountDetailsId",
          "currentState",
          "currentSubState",
          "targetState",
          "targetSubState",
          "status",
          "createdAt",
          "updatedAt",
          "createdBy",
          "updatedBy"
        ]
      },
      "LoanCancellableResponseDto": {
        "type": "object",
        "properties": {
          "cancellable": {
            "type": "boolean",
            "description": "Whether the loan can be cancelled",
            "example": true
          },
          "isSoldToTrust": {
            "type": "boolean",
            "description": "True if loan is sold to trust",
            "example": false
          },
          "isLoanVaried": {
            "type": "boolean",
            "description": "True if loan has been varied",
            "example": false
          },
          "isTransactionPending": {
            "type": "boolean",
            "description": "True if loan has pending bank transactions",
            "example": true
          }
        },
        "required": [
          "cancellable",
          "isSoldToTrust",
          "isLoanVaried",
          "isTransactionPending"
        ]
      },
      "LoanProductConfigurationDto": {
        "type": "object",
        "properties": {
          "loanProducts": {
            "description": "Loan Product Config",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["loanProducts"]
      },
      "CustomFieldsConfigurationDto": {
        "type": "object",
        "properties": {
          "customFieldSets": {
            "description": "Custom Fields Configuration",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["customFieldSets"]
      },
      "ClientRolesConfigurationDto": {
        "type": "object",
        "properties": {
          "rolesConfiguration": {
            "description": "Client Roles Configuration",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["rolesConfiguration"]
      },
      "GetLoanProductsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the loan product",
            "example": "8a89872d8da895a5018da9cdf6f764b0"
          },
          "externalReferenceId": {
            "type": "string",
            "description": "External Reference ID for Loan Product",
            "example": "USCC"
          },
          "externalReferenceType": {
            "type": "string",
            "description": "Location of the External Reference",
            "example": "MAMBU"
          },
          "name": {
            "type": "string",
            "description": "The name of the loan product",
            "example": "Test Product"
          },
          "type": {
            "type": "string",
            "description": "The type of the loan product",
            "example": "DYNAMIC_TERM_LOAN"
          },
          "state": {
            "type": "string",
            "description": "The state of the loan product",
            "example": "ACTIVE"
          },
          "fees": {
            "description": "The fees for the product",
            "example": [
              {
                "name": "Establishment Fee",
                "id": "8a8987728ea96327018eab15a063009d"
              }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "plannedFees": {
            "description": "The planned fees for the product",
            "example": [
              {
                "name": "Maintenance Fee",
                "id": "8a89864e8de00419018de2b560167a53"
              }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "paymentWaiverPremiums": {
            "description": "The payment waiver premium for the product",
            "example": [
              { "name": "Gold", "id": "8a89864e8de00419018de2b560167a53" }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "indexRates": {
            "description": "The index rates for the product",
            "example": [
              {
                "id": "8a89872d8da895a5018da9cdf6f764b0",
                "rate": 0.5,
                "notes": "Test Note"
              }
            ],
            "type": "array",
            "items": { "type": "string" }
          },
          "allowRedraw": {
            "type": "boolean",
            "description": "The redraw settings for the product",
            "example": true
          },
          "allowBalloonPayment": {
            "type": "boolean",
            "description": "If balloon payment is allowed for the product",
            "example": true
          }
        },
        "required": [
          "id",
          "externalReferenceId",
          "externalReferenceType",
          "name",
          "type",
          "state",
          "fees",
          "plannedFees",
          "paymentWaiverPremiums",
          "indexRates",
          "allowRedraw",
          "allowBalloonPayment"
        ]
      },
      "PaymentWaiverPremiumRequestDto": {
        "type": "object",
        "properties": {
          "loanTerm": {
            "type": "number",
            "example": 6,
            "description": "Loan term in months"
          },
          "loanAdvance": {
            "type": "number",
            "example": 1000,
            "description": "Loan amount (incl. fees)"
          }
        },
        "required": ["loanTerm", "loanAdvance"]
      },
      "PaymentWaiverPremiumResponseDto": {
        "type": "object",
        "properties": {
          "feeId": {
            "type": "string",
            "example": "de80b0d6-2a7c-4665-87f3-b0fade355c6b",
            "description": "Payment Waiver fee ID"
          },
          "premiumCost": {
            "type": "number",
            "example": 1000,
            "description": "Premium Cost"
          },
          "originatorAdvance": {
            "type": "number",
            "example": 12.4,
            "description": "Originator advance"
          },
          "originatorDeposit": {
            "type": "number",
            "example": 7.6,
            "description": "Originator deposit"
          },
          "adminDeposit": {
            "type": "number",
            "example": 5.1,
            "description": "Admin deposit"
          },
          "adminGST": {
            "type": "number",
            "example": 1.4,
            "description": "Admin GST"
          }
        },
        "required": [
          "feeId",
          "premiumCost",
          "originatorAdvance",
          "originatorDeposit",
          "adminDeposit",
          "adminGST"
        ]
      },
      "PaymentWaiverRebateRequestDto": {
        "type": "object",
        "properties": {
          "loanId": {
            "type": "string",
            "example": "123123123123",
            "description": "Loan ID"
          }
        },
        "required": ["loanId"]
      },
      "PaymentWaiverRebateResponseDto": {
        "type": "object",
        "properties": {
          "termLeft": {
            "type": "number",
            "example": 24,
            "description": "Term left"
          },
          "rebateAmount": {
            "type": "number",
            "example": 1000,
            "description": "Rebate amount"
          }
        },
        "required": ["termLeft", "rebateAmount"]
      },
      "PaymentWaiverDistributionDto": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "number",
            "example": 0.0253,
            "description": "cost to customer"
          },
          "originator": {
            "type": "number",
            "example": 0.0076,
            "description": "originator fee share"
          },
          "admin": {
            "type": "number",
            "example": 0.0051,
            "description": "admin fee share"
          }
        },
        "required": ["customer", "originator", "admin"]
      },
      "TermConfigDto": {
        "type": "object",
        "properties": {
          "termMin": {
            "type": "number",
            "example": 1,
            "description": "Minimum term in months"
          },
          "termMax": {
            "type": "number",
            "example": 6,
            "description": "Maximum term in months"
          },
          "feeDistribution": {
            "$ref": "#/components/schemas/PaymentWaiverDistributionDto"
          }
        },
        "required": ["termMin", "termMax", "feeDistribution"]
      },
      "PaymentWaiverConfigurationRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Gold",
            "description": "Name of the configuration"
          },
          "termConfigs": {
            "description": "List of term configurations",
            "example": [
              {
                "termMin": 1,
                "termMax": 6,
                "feeDistribution": {
                  "customer": 0.0253,
                  "originator": 0.0076,
                  "admin": 0.0051
                }
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/TermConfigDto" }
          }
        },
        "required": ["name", "termConfigs"]
      },
      "PaymentWaiverConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Gold",
            "description": "Name of the configuration"
          },
          "termConfigs": {
            "description": "List of term configurations",
            "example": [
              {
                "termMin": 1,
                "termMax": 6,
                "feeDistribution": {
                  "customer": 0.0253,
                  "originator": 0.0076,
                  "admin": 0.0051
                }
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/TermConfigDto" }
          },
          "id": {
            "type": "string",
            "example": "1",
            "description": "Unique identifier for the configuration"
          },
          "productId": {
            "type": "string",
            "example": "1",
            "description": "Unique identifier for the product"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2021-09-09T06:10:25.000Z",
            "description": "Date when the configuration was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2021-09-09T06:10:25.000Z",
            "description": "Date when the configuration was last updated"
          },
          "createdBy": {
            "type": "string",
            "example": "user",
            "description": "User who created the config"
          },
          "updatedBy": {
            "type": "string",
            "example": "user",
            "description": "User who last updated the config"
          }
        },
        "required": [
          "name",
          "termConfigs",
          "id",
          "productId",
          "createdAt",
          "updatedAt",
          "createdBy",
          "updatedBy"
        ]
      },
      "PatchPaymentWaiverConfigurationRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "Gold",
            "description": "Name of the configuration"
          },
          "name": {
            "type": "string",
            "example": "Gold",
            "description": "Name of the configuration"
          },
          "termConfigs": {
            "description": "List of term configurations",
            "example": [
              {
                "termMin": 1,
                "termMax": 6,
                "feeDistribution": {
                  "customer": 0.0253,
                  "originator": 0.0076,
                  "admin": 0.0051
                }
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/TermConfigDto" }
          }
        },
        "required": ["id"]
      },
      "FeeDistributionEntityConstraintDto": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "example": 0,
            "description": "Minimum fee value"
          },
          "max": {
            "type": "number",
            "example": 0,
            "description": "Minimum fee value"
          }
        }
      },
      "FeeDistributionEntityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
            "description": "Unique identifier of the entity"
          },
          "fee": {
            "type": "number",
            "example": 50,
            "description": "Fee portion for this entity"
          },
          "constraint": {
            "description": "Constraint for the fee",
            "example": { "min": 0, "max": 100 },
            "allOf": [
              {
                "$ref": "#/components/schemas/FeeDistributionEntityConstraintDto"
              }
            ]
          },
          "type": {
            "type": "string",
            "example": "FIXED",
            "description": "Type of distribution",
            "enum": ["FIXED", "VARIABLE"]
          }
        },
        "required": ["id", "fee"]
      },
      "FeeDistributionDto": {
        "type": "object",
        "properties": {
          "entities": {
            "description": "Distribution of the fee for each entity",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeeDistributionEntityDto" }
          }
        },
        "required": ["entities"]
      },
      "CreateFeeConfigurationRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Establishment Fee",
            "description": "Name of the fee"
          },
          "type": {
            "type": "string",
            "example": "ESTABLISHMENT_FEE",
            "description": "Type of the fee"
          },
          "payAt": {
            "type": "string",
            "example": "DISBURSEMENT",
            "description": "When to pay out the fee",
            "enum": ["DISBURSEMENT", "REPAYMENT", "PLANNED", "MANUAL"]
          },
          "payFrequency": {
            "type": "string",
            "example": "ONE_TIME",
            "description": "Frequency of paying the fee",
            "enum": [
              "ONE_TIME",
              "MONTHLY",
              "QUARTERLY",
              "SEMI_ANNUALLY",
              "ANNUALLY"
            ]
          },
          "externalReferenceId": {
            "type": "string",
            "example": "8a89872b91765b700191983057625348",
            "description": "External reference id of the fee"
          },
          "canBeCredited": {
            "type": "boolean",
            "example": false,
            "description": "Is Reversible"
          },
          "distribution": {
            "description": "Distribution of the fee",
            "example": {
              "entities": [
                {
                  "id": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
                  "fee": 50,
                  "constraint": { "min": 0, "max": 100 },
                  "type": "FIXED"
                }
              ]
            },
            "allOf": [{ "$ref": "#/components/schemas/FeeDistributionDto" }]
          }
        },
        "required": [
          "name",
          "type",
          "payAt",
          "payFrequency",
          "externalReferenceId"
        ]
      },
      "GetFeeConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Establishment Fee",
            "description": "Name of the fee"
          },
          "type": {
            "type": "string",
            "example": "ESTABLISHMENT_FEE",
            "description": "Type of the fee"
          },
          "payAt": {
            "type": "string",
            "example": "DISBURSEMENT",
            "description": "When to pay out the fee",
            "enum": ["DISBURSEMENT", "REPAYMENT", "PLANNED", "MANUAL"]
          },
          "payFrequency": {
            "type": "string",
            "example": "ONE_TIME",
            "description": "Frequency of paying the fee",
            "enum": [
              "ONE_TIME",
              "MONTHLY",
              "QUARTERLY",
              "SEMI_ANNUALLY",
              "ANNUALLY"
            ]
          },
          "externalReferenceId": {
            "type": "string",
            "example": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
            "description": "encoded key associated to fee"
          },
          "canBeCredited": {
            "type": "boolean",
            "example": false,
            "description": "Is Reversible"
          },
          "distribution": {
            "description": "Distribution of the fee",
            "example": {
              "entities": [
                {
                  "id": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
                  "fee": 50,
                  "constraint": { "min": 0, "max": 100 },
                  "type": "FIXED"
                }
              ]
            },
            "allOf": [{ "$ref": "#/components/schemas/FeeDistributionDto" }]
          },
          "id": {
            "type": "string",
            "example": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
            "description": "Unique identifier of the fee"
          },
          "productId": {
            "type": "string",
            "example": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
            "description": "Unique identifier of the product"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01",
            "description": "Date the fee config was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01",
            "description": "Date the fee was last updated"
          },
          "createdBy": {
            "type": "string",
            "example": "user",
            "description": "User who created the fee"
          },
          "updatedBy": {
            "type": "string",
            "example": "user",
            "description": "User who last updated the fee"
          }
        },
        "required": [
          "name",
          "type",
          "payAt",
          "payFrequency",
          "externalReferenceId",
          "id",
          "productId",
          "createdAt",
          "updatedAt",
          "createdBy",
          "updatedBy"
        ]
      },
      "PatchFeeConfigurationRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "id",
            "description": "id of the configuration"
          },
          "name": {
            "type": "string",
            "example": "Fee name",
            "description": "Name of the fee configuration"
          },
          "canBeCredited": {
            "type": "boolean",
            "example": false,
            "description": "Is Reversible"
          },
          "payAt": {
            "type": "string",
            "example": "when to pay ot out",
            "description": "When to pay out the fee",
            "enum": ["DISBURSEMENT", "REPAYMENT", "PLANNED", "MANUAL"]
          },
          "payFrequency": {
            "type": "string",
            "example": "when to pay ot out",
            "description": "When to pay out the fee",
            "enum": [
              "ONE_TIME",
              "MONTHLY",
              "QUARTERLY",
              "SEMI_ANNUALLY",
              "ANNUALLY"
            ]
          },
          "distribution": {
            "description": "Distribution of the fee",
            "example": {
              "entities": [
                {
                  "id": "de80b0d6-2a7c-4665-87f3-b0fade355c60",
                  "fee": 50,
                  "constraint": { "min": 0, "max": 100 },
                  "type": "FIXED"
                }
              ]
            },
            "allOf": [{ "$ref": "#/components/schemas/FeeDistributionDto" }]
          },
          "externalReferenceId": {
            "type": "string",
            "description": "The external reference id of the fee",
            "example": "8a8987728ea96327018eab15a063009d"
          }
        },
        "required": ["id"]
      },
      "GetEntityFeeConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the fee",
            "example": "Establishment Fee"
          },
          "amount": {
            "type": "number",
            "description": "The default amount of the fee",
            "example": 100
          },
          "id": {
            "type": "string",
            "description": "The id of the fee",
            "example": "8a89872b91765b70019198305762534a"
          },
          "distribution": {
            "description": "The fees distribution",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoanAccountFeeDistributionDto"
            }
          },
          "minimum": {
            "type": "number",
            "description": "The minimum amount of the fee",
            "example": 50
          },
          "maximum": {
            "type": "number",
            "description": "The maximum amount of the fee",
            "example": 150
          },
          "error": {
            "type": "string",
            "description": "The error occured when fetching this fee config",
            "example": "Entity has no config for fee 8a89872b91765b70019198305762534a"
          }
        },
        "required": [
          "name",
          "amount",
          "id",
          "distribution",
          "minimum",
          "maximum",
          "error"
        ]
      },
      "ProcessRepaymentsRequestDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The unique identifier of the product",
            "example": "8a8986cb8ec90528018eca0be2243b8d"
          },
          "loanAccountId": {
            "type": "string",
            "description": "The unique identifier of the loan account",
            "example": "8a8986cb8ec90528018eca0be2243b8d"
          },
          "dueTo": {
            "format": "date-time",
            "type": "string",
            "description": "The ending date until which to process repayments, default is today",
            "example": "2024-01-31"
          }
        },
        "required": ["productId"]
      },
      "ProcessedRepaymentDto": {
        "type": "object",
        "properties": {
          "installmentId": {
            "type": "string",
            "description": "Unique identifier for the installment",
            "example": "8a8986cb8ec90528018eca0be2243b8d"
          },
          "loanAccountId": {
            "type": "string",
            "description": "Loan account ID associated with the repayment",
            "example": "8a8986cb8ec90528018eca0be2243b8d"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID associated with the repayment",
            "example": "8a8986cb8ec90528018eca0be2243b8d"
          },
          "amount": {
            "type": "number",
            "description": "Amount of the repayment",
            "example": 350
          },
          "notes": {
            "type": "string",
            "description": "Additional notes regarding the repayment",
            "example": "Late fee applied"
          },
          "status": {
            "type": "string",
            "description": "Status of the repayment",
            "example": ["processed", "failed"]
          }
        },
        "required": [
          "installmentId",
          "loanAccountId",
          "transactionId",
          "amount",
          "notes",
          "status"
        ]
      },
      "ProcessRepaymentsResponseDto": {
        "type": "object",
        "properties": {
          "processedRepayments": {
            "description": "List of processed repayments",
            "example": [
              {
                "installmentId": "8a8986cb8ec90528018eca0be2243b8d",
                "loanAccountId": "8a8986cb8ec90528018eca0be2243b8d",
                "amount": 350,
                "notes": "Late fee applied",
                "status": "processed"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProcessedRepaymentDto" }
          }
        },
        "required": ["processedRepayments"]
      },
      "CreateRepaymentRetryConfigRequestDto": {
        "type": "object",
        "properties": {
          "dishonourCode": {
            "type": "string",
            "description": "The code returned by the bank telling us what type of dishonour this is",
            "example": "DISHONOUR-03"
          },
          "productId": {
            "type": "string",
            "description": "The product id this information is associated to",
            "example": "USCC"
          },
          "maximumRetries": {
            "type": "number",
            "description": "How many time you can retry on this code before stopping",
            "example": 1
          },
          "isFatal": {
            "type": "boolean",
            "description": "Is this error fatal. Changes whether you freeze the loan or the installment",
            "example": true
          }
        },
        "required": ["dishonourCode", "productId", "maximumRetries", "isFatal"]
      },
      "RepaymentRetryConfigDto": {
        "type": "object",
        "properties": {
          "dishonourCode": {
            "type": "string",
            "description": "The code returned by the bank telling us what type of dishonour this is",
            "example": "DISHONOUR-03"
          },
          "productId": {
            "type": "string",
            "description": "The product id this information is associated to",
            "example": "USCC"
          },
          "maximumRetries": {
            "type": "number",
            "description": "How many time you can retry on this code before stopping",
            "example": 1
          },
          "isFatal": {
            "type": "boolean",
            "description": "Is this error fatal. Changes whether you freeze the loan or the installment",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "The id of the database entry",
            "example": "2c0eecb0-363e-4d8e-b2b5-3a9bab28d76b"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date the code was added to the database",
            "example": "2025-01-10T00:00:00.000Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of who created the database entry",
            "example": "2c0eecb0-363e-4d8e-b2b5-3a9bab28d76b"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date the code was last updated",
            "example": "2025-01-10T00:00:00.000Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of who created last updated the code",
            "example": "2c0eecb0-363e-4d8e-b2b5-3a9bab28d76b"
          }
        },
        "required": [
          "dishonourCode",
          "productId",
          "maximumRetries",
          "isFatal",
          "id",
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy"
        ]
      },
      "UpdateRepaymentRetryConfigRequestDto": {
        "type": "object",
        "properties": {
          "dishonourCode": {
            "type": "string",
            "description": "The code returned by the bank telling us what type of dishonour this is",
            "example": "DISHONOUR-03"
          },
          "productId": {
            "type": "string",
            "description": "The product id this information is associated to",
            "example": "USCC"
          },
          "maximumRetries": {
            "type": "number",
            "description": "How many time you can retry on this code before stopping",
            "example": 1
          },
          "isFatal": {
            "type": "boolean",
            "description": "Is this error fatal. Changes whether you freeze the loan or the installment",
            "example": true
          }
        }
      },
      "CreateSubscriptionRequestDto": {
        "type": "object",
        "properties": {
          "owningApplication": {
            "type": "string",
            "description": "The Application owning this subscription",
            "example": "webhook-api"
          },
          "eventTypes": {
            "description": "An array of events to listen for",
            "example": ["mrn.event.mtftest.streamingapi.loan_repayment"],
            "type": "array",
            "items": { "type": "string" }
          },
          "consumerGroup": {
            "type": "string",
            "description": "A subgroup with the application that the subscription belongs too",
            "example": "Loans"
          }
        },
        "required": ["owningApplication", "eventTypes"]
      },
      "CreateSubscriptionResponseDto": {
        "type": "object",
        "properties": {
          "owningApplication": {
            "type": "string",
            "description": "The Application owning this subscription",
            "example": "webhook-api"
          },
          "eventTypes": {
            "description": "An array of events to listen for",
            "example": ["mrn.event.mtftest.streamingapi.loan_repayment"],
            "type": "array",
            "items": { "type": "string" }
          },
          "consumerGroup": {
            "type": "string",
            "description": "A subgroup with the application that the subscription belongs too",
            "example": "Loans"
          },
          "id": {
            "type": "string",
            "description": "The subscription id",
            "example": "f6976174-252e-4690-9e85-c3aede468916"
          },
          "order": {
            "type": "string",
            "description": "The end to read from",
            "example": "OldToNew"
          },
          "createdAt": {
            "type": "string",
            "description": "The date-time the subscription was created",
            "example": "1/1/1111"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date-time the subscription was updated",
            "example": "1/11/1111"
          }
        },
        "required": [
          "owningApplication",
          "eventTypes",
          "id",
          "order",
          "createdAt",
          "updatedAt"
        ]
      },
      "EventSchemaSourceDto": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "The Name of the service emitting the event",
            "example": "MAMBU_INT_SERVICE"
          },
          "serviceVersion": {
            "type": "string",
            "description": "The version of the service emitting the event",
            "example": "v1"
          }
        },
        "required": ["serviceName", "serviceVersion"]
      },
      "EventSchemaMetadataDto": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "A unique identifier to correlate events in a flow",
            "example": "d6e15557-2887-4bed-a123-ce6cf6f52cf0"
          }
        },
        "required": ["correlationId"]
      },
      "EventSchemaErrorDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "404"
          },
          "messages": {
            "type": "string",
            "description": "The error message",
            "example": "Not found"
          }
        },
        "required": ["code", "messages"]
      },
      "EventSchemaDto": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version",
            "example": "v1"
          },
          "eventId": {
            "type": "string",
            "description": "The unique id of the event",
            "example": "f1ade892-db37-4074-8579-bbdf54811ede"
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that happened",
            "example": "MAMBU_LOAN_ACCOUNT_CREATED"
          },
          "timeStamp": {
            "type": "string",
            "description": "The time of the event",
            "example": "6/05/2024"
          },
          "source": {
            "description": "Details about the source of the event",
            "allOf": [{ "$ref": "#/components/schemas/EventSchemaSourceDto" }]
          },
          "data": { "type": "object", "description": "The events data" },
          "metadata": {
            "description": "The events metadata",
            "allOf": [{ "$ref": "#/components/schemas/EventSchemaMetadataDto" }]
          },
          "error": {
            "description": "The events error",
            "allOf": [{ "$ref": "#/components/schemas/EventSchemaErrorDto" }]
          }
        },
        "required": [
          "version",
          "eventId",
          "eventType",
          "timeStamp",
          "source",
          "data",
          "metadata"
        ]
      },
      "ValidJobResponseDto": { "type": "object", "properties": {} },
      "RegisterJobResponseDto": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Name of the service to register the job with",
            "example": "webhookService"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job to be registered",
            "example": "webhookRunHello"
          },
          "functionName": {
            "type": "string",
            "description": "Name of the function to be executed by the job",
            "example": "getHello"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression defining the job schedule",
            "example": "*/2 * * * * *"
          },
          "timezone": {
            "type": "string",
            "description": "Specify the timezone for the execution. If the timezone is invalid, an error is thrown. You can check all timezones available at Moment Timezone website. https://momentjs.com/timezone/",
            "example": "Pacific/Auckland",
            "default": "Pacific/Auckland"
          },
          "maxRetries": {
            "type": "number",
            "description": "Retry incase the job fails",
            "example": 0,
            "default": 0
          },
          "initialRetryDelaySec": {
            "type": "number",
            "description": "Retry after initial delay",
            "example": 300,
            "default": 300
          }
        },
        "required": ["serviceName", "jobName", "functionName", "cronExpression"]
      },
      "JobHistoryResponseDto": { "type": "object", "properties": {} },
      "UpdateJobDto": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Name of the service to register the job with",
            "example": "webhookService"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job to be registered",
            "example": "webhookRunHello"
          },
          "functionName": {
            "type": "string",
            "description": "Name of the function to be executed by the job",
            "example": "getHello"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression defining the job schedule",
            "example": "*/2 * * * * *"
          },
          "timezone": {
            "type": "string",
            "description": "Specify the timezone for the execution. If the timezone is invalid, an error is thrown. You can check all timezones available at Moment Timezone website. https://momentjs.com/timezone/",
            "example": "Pacific/Auckland",
            "default": "Pacific/Auckland"
          },
          "maxRetries": {
            "type": "number",
            "description": "Retry incase the job fails",
            "example": 0,
            "default": 0
          },
          "initialRetryDelaySec": {
            "type": "number",
            "description": "Retry after initial delay",
            "example": 300,
            "default": 300
          }
        }
      },
      "RegisterJobDto": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Name of the service to register the job with",
            "example": "webhookService"
          },
          "jobName": {
            "type": "string",
            "description": "Name of the job to be registered",
            "example": "webhookRunHello"
          },
          "functionName": {
            "type": "string",
            "description": "Name of the function to be executed by the job",
            "example": "getHello"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression defining the job schedule",
            "example": "*/2 * * * * *"
          },
          "timezone": {
            "type": "string",
            "description": "Specify the timezone for the execution. If the timezone is invalid, an error is thrown. You can check all timezones available at Moment Timezone website. https://momentjs.com/timezone/",
            "example": "Pacific/Auckland",
            "default": "Pacific/Auckland"
          },
          "maxRetries": {
            "type": "number",
            "description": "Retry incase the job fails",
            "example": 0,
            "default": 0
          },
          "initialRetryDelaySec": {
            "type": "number",
            "description": "Retry after initial delay",
            "example": 300,
            "default": 300
          }
        },
        "required": ["serviceName", "jobName", "functionName", "cronExpression"]
      },
      "JobEntity": { "type": "object", "properties": {} },
      "HistoryLogsResponseDto": { "type": "object", "properties": {} },
      "PaginatedEventResponseDto": { "type": "object", "properties": {} },
      "EventResponseDto": { "type": "object", "properties": {} },
      "RetryEventDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "example": "8a89872d8da895a5018da9cdf6f764b0",
            "description": "Id of the event for which we want to retry the processing"
          }
        },
        "required": ["eventId"]
      },
      "EventRetryResponseDto": { "type": "object", "properties": {} },
      "TriggerCurrentStateDto": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "example": "funding_funding_sources",
            "description": "Topic/Queue name of the event for which we want to retry the processing"
          },
          "eventType": {
            "type": "string",
            "example": "FUNDING_SOURCE_CREATED",
            "description": "Event Type"
          },
          "objectId": {
            "type": "string",
            "example": "1e4a8428-a0da-4812-8515-f012185571d7",
            "description": "Unique identifier for the payload (e.g., funding source ID)"
          },
          "additionalProperties": {
            "type": "object",
            "example": { "name": "Sample Name" },
            "description": "Additional dynamic properties",
            "additionalProperties": true
          },
          "eventVersion": {
            "type": "string",
            "example": "1.0",
            "description": "Event payload version"
          }
        },
        "required": [
          "endpoint",
          "eventType",
          "objectId",
          "additionalProperties"
        ]
      }
    }
  }
}
